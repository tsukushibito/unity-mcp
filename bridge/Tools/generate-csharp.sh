#!/usr/bin/env bash
set -euo pipefail

# スクリプトのディレクトリを基準にrepo-rootを特定
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

PROTO_ROOT="$REPO_ROOT/proto"
OUT="$REPO_ROOT/bridge/Packages/com.example.mcp-bridge/Editor/Generated"

# Clean up old generated files to avoid conflicts
if [ -d "$OUT" ]; then
  echo "[generate-csharp.sh] Cleaning up old generated files..."
  rm -f "$OUT"/*.cs
  rm -rf "$OUT"/Proto
fi

mkdir -p "$OUT"

# Generate C# protobuf messages only (no gRPC stubs) for Direct IPC
protoc \
  -I="$PROTO_ROOT" \
  --csharp_out="$OUT" \
  --csharp_opt=base_namespace=Mcp.Unity.V1 \
  "$PROTO_ROOT"/mcp/unity/v1/common.proto \
  "$PROTO_ROOT"/mcp/unity/v1/editor_control.proto \
  "$PROTO_ROOT"/mcp/unity/v1/assets.proto \
  "$PROTO_ROOT"/mcp/unity/v1/prefab.proto \
  "$PROTO_ROOT"/mcp/unity/v1/build.proto \
  "$PROTO_ROOT"/mcp/unity/v1/operations.proto \
  "$PROTO_ROOT"/mcp/unity/v1/events.proto \
  "$PROTO_ROOT"/mcp/unity/v1/component.proto \
  "$PROTO_ROOT"/mcp/unity/v1/ipc.proto \
  "$PROTO_ROOT"/mcp/unity/v1/ipc_control.proto

# Generate SchemaHash.cs from Rust SCHEMA_HASH
SCHEMA_HASH_RS="$REPO_ROOT/server/src/generated/schema_hash.rs"
SCHEMA_PB="$REPO_ROOT/server/src/generated/schema.pb"
SCHEMA_HASH_CS="$OUT/SchemaHash.cs"

# Check if schema.pb exists as fallback
if [ ! -f "$SCHEMA_HASH_RS" ] && [ ! -f "$SCHEMA_PB" ]; then
    echo "Error: Neither $SCHEMA_HASH_RS nor $SCHEMA_PB found. Run server/scripts/generate-rust-proto.sh first."
    exit 1
fi

echo "[generate-csharp.sh] Generating SchemaHash.cs from Rust SCHEMA_HASH..."

# Primary method: Extract from schema_hash.rs with improved robustness
if [ -f "$SCHEMA_HASH_RS" ]; then
    # Extract SCHEMA_HASH line and then the byte array with scope limiting
    SCHEMA_HASH_LINE=$(grep -n "pub const SCHEMA_HASH:" "$SCHEMA_HASH_RS" | head -1)
    if [ -n "$SCHEMA_HASH_LINE" ]; then
        LINE_NUM=$(echo "$SCHEMA_HASH_LINE" | cut -d: -f1)
        # Extract byte array from the SCHEMA_HASH definition line only
        HASH_BYTES=$(sed -n "${LINE_NUM}p" "$SCHEMA_HASH_RS" | grep -o '\[[0-9, ]*\]' | head -1)
    else
        # Fallback to old method
        HASH_BYTES=$(grep -o '\[[0-9, ]*\]' "$SCHEMA_HASH_RS" | head -1)
    fi
    
    if [ -z "$HASH_BYTES" ]; then
        echo "Warning: Failed to extract SCHEMA_HASH from $SCHEMA_HASH_RS, falling back to schema.pb"
        HASH_BYTES=""
    fi
fi

# Fallback method: Direct SHA-256 computation from schema.pb 
if [ -z "$HASH_BYTES" ] && [ -f "$SCHEMA_PB" ]; then
    echo "[generate-csharp.sh] Using fallback: computing SHA-256 directly from schema.pb"
    HASH_HEX_FROM_PB=$(sha256sum "$SCHEMA_PB" | cut -d' ' -f1)
    # Convert hex string to byte array format
    HASH_BYTES="["
    for i in $(seq 0 2 62); do
        byte_hex=${HASH_HEX_FROM_PB:$i:2}
        byte_dec=$((16#$byte_hex))
        if [ $i -eq 0 ]; then
            HASH_BYTES="$HASH_BYTES$byte_dec"
        else
            HASH_BYTES="$HASH_BYTES, $byte_dec"
        fi
    done
    HASH_BYTES="$HASH_BYTES]"
fi

if [ -z "$HASH_BYTES" ]; then
    echo "Error: Failed to extract or compute SCHEMA_HASH"
    exit 1
fi

# Convert byte array to hex string (remove brackets and spaces, convert to hex)
HASH_HEX=""
for byte in $(echo "$HASH_BYTES" | tr -d '[],' | tr -s ' '); do
    if [ -n "$byte" ]; then
        # Convert decimal to hex with zero padding
        hex=$(printf "%02x" "$byte")
        HASH_HEX="$HASH_HEX$hex"
    fi
done

if [ ${#HASH_HEX} -ne 64 ]; then
    echo "Error: Generated hash hex length is ${#HASH_HEX}, expected 64 characters"
    exit 1
fi

# Generate SchemaHash.cs
cat > "$SCHEMA_HASH_CS" << EOF
// <auto-generated>
// This file was automatically generated from server SCHEMA_HASH.
// DO NOT EDIT - Changes will be overwritten.
// </auto-generated>

namespace Mcp.Unity.V1.Generated
{
    internal static class Schema
    {
        public const string SCHEMA_HASH_HEX = "$HASH_HEX";
        
        public static byte[] SchemaHashBytes => new byte[]
        {
            $(echo "$HASH_BYTES" | tr -d '[]' | sed 's/,/, /g')
        };
    }
}
EOF

echo "[generate-csharp.sh] C# Protobuf messages generated into $OUT"
echo "[generate-csharp.sh] SchemaHash.cs generated with hash: $HASH_HEX"
